---
layout:     post
title:      "归并排序"
subtitle:   "非递归 "
date:       2016-03-28 12:00:00
author:     "PhoenixDo"
header-img: "img/post-bg-alibaba.jpg"
header-mask: 0.3
catalog:    true
tags:
    - 算法
    - 排序
    - 算法
    - 算法
    
---

## 算法简介

归并排序是建立在归并操作上的一种有效的排序算法，该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。

## 归并排序的基本思想

将待排序序列R[0...n-1]看成是n个长度为1的有序序列，将相邻的有序表成对归并，得到n/2个长度为2的有序表；将这些有序序列再次归并，得到n/4个长度为4的有序序列；如此反复进行下去，最后得到一个长度为n的有序序列。
综上可知：

归并排序其实要做两件事：<br>
（1）“分解”——将序列每次折半划分。<br>
（2）“合并”——将划分后的序列段两两合并后排序。

## 实现代码
传入merge函数数组，以及分段标识low、mid和high

```
void merge_my(int arr[],int low,int mid,int high){
    int temp = mid;
    int low_temp = low;
    int index = 0;
    int *mergeArray = new int[high -  low +1];
    while (low<mid && temp<=high) {
        if (arr[low]<=arr[temp]) {
            mergeArray[index] = arr[low];
            index++;
            low++;
        }else{
            mergeArray[index] = arr[temp];
            temp++;
            index++;
        }
    }
    while (low<mid) {
        mergeArray[index] = arr[low];
        index++;
        low++;
    }
    while (temp<=high) {
        mergeArray[index] = arr[temp];
        temp++;
        index++;
    }

    for (index = 0; low_temp<=high; low_temp++,index++) {
        arr[low_temp] = mergeArray[index];

    }

}
```
对数组进行分块

```
void mergeSort(int arr[],int gap,int length){
    int i =0;
    for (i=0; i+ 2*gap-1<length; i = i + 2*gap) {
        merge_my(arr, i, i + gap, i + 2*gap -1);
    }

    if (i + gap - 1 <length) {
        merge_my(arr, i, i + gap, length-1);
    }
}
```
调用方法

```
int main(int argc, const char * argv[]) {
    int arr[8] = {4,2,1,5,7,3,9,6};
    for (int gap =1; gap < 8; gap = 2*gap) {
        mergeSort(arr, gap, 8);
    }
    for (int i = 0; i<8; i++) {
        cout<<arr[i]<<endl;
    }

    return 0;
}
```
